<Project>

  <PropertyGroup>
    <!-- TODO: why are we doing this-->
    <RepoRoot>$([System.IO.Path]::GetDirectoryName($([MSBuild]::GetPathOfFileAbove('.gitignore', '$(MSBuildThisFileDirectory)'))))/</RepoRoot>
  </PropertyGroup>

  <PropertyGroup Condition="$([System.Environment]::GetEnvironmentVariable('unityVersion')) != ''">
    <UnityVersion>$(UNITY_VERSION)</UnityVersion>
  </PropertyGroup>

  <PropertyGroup Condition="$([System.Environment]::GetEnvironmentVariable('unityVersion')) == ''">
    <UnitySampleProjectUnityVersion>$(RepoRoot)samples/unity-of-bugs/ProjectSettings/ProjectVersion.txt</UnitySampleProjectUnityVersion>
    <ProjectSettingsFileContent>$([System.IO.File]::ReadAllText($(UnitySampleProjectUnityVersion)))</ProjectSettingsFileContent>
    <UnityVersion>$([System.Text.RegularExpressions.Regex]::Match("$(ProjectSettingsFileContent)", ": +([^\s]+)").Groups[1].Value)</UnityVersion>
  </PropertyGroup>

  <PropertyGroup>
    <Version>0.25.1</Version>
    <LangVersion>9</LangVersion>
    <Nullable>enable</Nullable>
    <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
    <GenerateDependencyFile>false</GenerateDependencyFile>
    <DevPackageFolderName>package-dev</DevPackageFolderName>
    <Deterministic>true</Deterministic>
    <Features>strict</Features>
    <SignAssembly>false</SignAssembly>
  </PropertyGroup>

  <PropertyGroup Condition="$(UnityVersion.StartsWith('2019')) or $(UnityVersion.StartsWith('2020'))">
    <TargetFramework>netstandard2.0</TargetFramework>
  </PropertyGroup>

  <PropertyGroup Condition="$(UnityVersion.StartsWith('2021')) or $(UnityVersion.StartsWith('2022'))">
    <TargetFramework>netstandard2.1</TargetFramework>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Roslynator.Analyzers" Version="3.0.0" PrivateAssets="All" />
    <PackageReference Include="Microsoft.NETFramework.ReferenceAssemblies" Version="1.0.0" PrivateAssets="All" />
    <PackageReference Include="Microsoft.CodeAnalysis.BannedApiAnalyzers" Version="3.3.0" PrivateAssets="All" />
    <PackageReference Include="Nullable" Version="1.3.0" PrivateAssets="All" />
  </ItemGroup>

  <Target Name="PrintVersions" BeforeTargets="CoreCompile" Condition="'$(MSBuildProjectName)' == 'Sentry.Unity'">
    <Message Text="%0aBuilding the Unity SDK with:%0a    UnityVersion: $(UnityVersion)%0a    TargetFramework: $(TargetFramework)%0a" Importance="High" />
    <Message Text="HUE: $(Fake)" Importance="High" />
  </Target>

  <!-- Add reference once we figure out where the DLL is (find Unity version and install location) -->
  <Target Name="ReferenceUnity" DependsOnTargets="FindUnity" BeforeTargets="BeforeResolveReferences">
    <Error Condition="'$(UnityManagedPath)' == ''" Text="'UnityManagedPath' not defined. Can't find UnityEngine.dll." />
    <Error Condition="!Exists('$(UnityManagedPath)/UnityEngine.dll')" Text="Couldn't find UnityEngine at $(UnityManagedPath)/UnityEngine.dll." />
    <ItemGroup>
      <Reference Include="UnityEngine">
        <HintPath>$(UnityManagedPath)/UnityEngine.dll</HintPath>
        <Private>false</Private>
      </Reference>
    </ItemGroup>
  </Target>
</Project>
