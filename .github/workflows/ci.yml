name: CI

on:
  push:
    branches:
      - main
      - release/*

  pull_request:
    paths:
    - '.github/**/*.yml'
    - 'src/**'
    - 'test/**'
    - 'samples/**'
    - 'Directory.Build.props'
    - '*sln*'
    - '*NuGet*'
    - '.gitmodules'
    - '.craft.yml'

env:
  UNITY_VERSION: 2019.4.21f1
  UNITY_VERSION_CHANGESET: b76dac84db26

jobs:

  build:
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.3

      # Unity is about 3gb in size and takes 20 minutes to download and install.
      # Caching still takes some time, but brings it down to about 5 minutes.
      # Note: if you change the installation step, remember to update the value
      # at the end of the key.
      - name: Restore cached Unity installation
        id: cache-unity
        uses: actions/cache@v2
        with:
          path: C:/Program Files/Unity
          key: ${{ env.UNITY_VERSION }}-${{ env.UNITY_VERSION_CHANGESET }}
       
      - name: Restore previous build
        uses: actions/cache@v2
        with:
          path: artifacts/build
          key: ${{ env.UNITY_VERSION }}-${{ env.UNITY_VERSION_CHANGESET }}

      - name: Restore Unity Packages
        uses: actions/cache@v2
        with:
          path: samples/unity-of-bugs/Library
          key: ${{ runner.os }}-${{ hashFiles('samples/unity-of-bugs/Packages/packages-lock.json') }}

      - name: Setup Unity
        uses: kuler90/setup-unity@f44e3f35ce3737316a15321ec3468161940e23e8
        id: setup-unity
        with:
          unity-version: ${{ env.UNITY_VERSION }}
          unity-version-changeset:  ${{ env.UNITY_VERSION_CHANGESET }}

      - name: Check Unity Modules
        run: |
          Get-Content -Raw -Path "C:/Program Files/Unity/Hub/Editor/${{env.UNITY_VERSION}}/modules.json" | ConvertFrom-Json

      - name: Setup Unity Modules - Windows IL2CPP
        uses: kuler90/setup-unity@f44e3f35ce3737316a15321ec3468161940e23e8
        with:
          unity-version: ${{ env.UNITY_VERSION }}
          unity-modules: windows-il2cpp

      - name: Setup Unity Modules - Android
        uses: kuler90/setup-unity@f44e3f35ce3737316a15321ec3468161940e23e8
        with:
          unity-version: ${{ env.UNITY_VERSION }}
          unity-modules: android

      # Need to write to $GITHUB_PATH to make the environment variable
      # available to other steps.
      - name: Add Unity on PATH
        run: |
          Write-Output "C:/Program Files/Unity/Hub/Editor/${{env.UNITY_VERSION}}/Editor" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      # License activation sometimes fails due to a problem connecting
      # to Unity's licensing backend. Retry a few times if it fails.
      - name: Activate Unity license
        id: activate-license
        run: |
          $attempts = 5

          while ($attempts -gt 0) {
            unity -quit -batchmode -nographics -logFile - -serial ${{ secrets.UNITY_SERIAL }} -username ${{ secrets.UNITY_EMAIL }} -password ${{ secrets.UNITY_PASSWORD }} | Out-Default

            if ($LASTEXITCODE -eq 0) {
              break
            }

            Write-Host "License activation failed. Retrying..."
            Start-Sleep -Seconds 15
            $attempts--
          }

          if ($LASTEXITCODE -ne 0) {
            Write-Host "::error ::Failed to activate license after multiple attempts."
          }

      - name: Build Sentry.Unity Solution
        run: dotnet build -c Release

      - name: Run Unity tests (playmode)
        run: dotnet msbuild /t:UnityPlayModeTest /p:Configuration=Release

      - name: Upload test artifacts (playmode)
        uses: actions/upload-artifact@v1
        with:
          name: Test results (playmode)
          path: artifacts/test/playmode

      - name: Run Unity tests (editmode)
        run: dotnet msbuild /t:UnityEditModeTest /p:Configuration=Release

      - name: Upload test artifacts (editmode)
        uses: actions/upload-artifact@v1
        with:
          name: Test results (editmode)
          path: artifacts/test/editmode

      - name: Build Android Player with IL2CPP
        run: dotnet msbuild /t:UnityBuildPlayerAndroidIL2CPP /p:Configuration=Release

      - name: Upload Android Build
        uses: actions/upload-artifact@v1
        with:
          name: Android Build
          path: samples/artifacts/builds/Android

      - name: Build Standalone Player with IL2CPP
        run: dotnet msbuild /t:UnityBuildPlayerIL2CPP /p:Configuration=Release

      - name: Run Smoke Tests
        run: dotnet msbuild /t:UnitySmokeTestPlayerIL2CPP

      - name: Prepare Sentry package for release
        run: |
          New-Item "package-release" -ItemType Directory

          # Copy `package-dev` stuff
          Copy-Item "package-dev/*" -Destination "package-release/" -Exclude "README.md", "package.json", "Tests", "Tests.meta", "*.asmdef", "*.asmdef.meta", "SentryOptions.json*" -Recurse

          # Copy `package` stuff
          Copy-Item "package/package.json" -Destination "package-release/package.json"
          Copy-Item "package/README.md" -Destination "package-release/README.md"
          Copy-Item "CHANGELOG.md" -Destination "package-release/CHANGELOG.md"
          Copy-Item "package/CHANGELOG.md.meta" -Destination "package-release/CHANGELOG.md.meta"
          Copy-Item "LICENSE.md" -Destination "package-release/LICENSE.md"
          Copy-Item "package/LICENSE.md.meta" -Destination "package-release/LICENSE.md.meta"
          New-Item -Type dir "package-release/Editor/" -Force
          Get-ChildItem "package/Editor/" -Include "*.asmdef", "*.asmdef.meta" -Recurse | ForEach-Object { Copy-Item -Path $_.FullName -Destination "package-release/Editor/" }
          New-Item -Type dir "package-release/Runtime/" -Force
          Get-ChildItem "package/Runtime/" -Include "*.asmdef", "*.asmdef.meta" -Recurse | ForEach-Object { Copy-Item -Path $_.FullName -Destination "package-release/Runtime/" }
          # Destination directory need to exist if we're copying a file instead of a directory
          New-Item -Type dir "package-release/Documentation~/" -Force
          Get-ChildItem "package/Documentation~/" -Include "*.md" -Recurse | ForEach-Object { Copy-Item -Path $_.FullName -Destination "package-release/Documentation~/" }

          # Copy samples
          Copy-Item "samples/unity-of-bugs/Assets/Scenes" -Destination "package-release/Samples~/unity-of-bugs/Assets/Scenes" -Recurse
          Copy-Item "samples/unity-of-bugs/Assets/Scripts" -Destination "package-release/Samples~/unity-of-bugs/Assets/Scripts" -Recurse

          # Create zip
          Compress-Archive "package-release/*" -DestinationPath "package-release.zip" -Force

      - name: Upload build artifacts if build failed
        if: ${{ failure() }}
        uses: actions/upload-artifact@v1
        with:
          name: Build output
          path: artifacts/build

      - name: Upload release artifacts
        uses: actions/upload-artifact@v1
        with:
          name: ${{ github.sha }}
          path: package-release.zip

      # Professional licenses are per-seat so we should always try to return them
      - name: Return Unity license
        if: ${{ always() }}
        run: |
          unity -quit -batchmode -nographics -logFile - -returnlicense | Out-Default
