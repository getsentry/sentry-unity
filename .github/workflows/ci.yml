name: CI

on:
  push:
    paths-ignore:
      - '**.md'
      - '**.txt'
  workflow_dispatch: # e.g. to manually trigger on foreign PRs

env:
  LOWEST_SUPPORTED_UNITY_VERSION: 2019
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  DOTNET_NOLOGO: 1

defaults:
  run:
    shell: pwsh

jobs:
  cancel-previous-workflow:
    runs-on: ubuntu-latest
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@b173b6ec0100793626c2d9e6b90435061f4fc3e5 # pin@0.11.0
        with:
          access_token: ${{ github.token }}

  sdk:
    strategy:
      matrix:
        include:
          - target: Android
            host: ubuntu-latest
          - target: iOS
            host: macos-12
          - target: Linux
            host: ubuntu-latest
          - target: macOS
            host: macos-latest
          - target: Windows
            host: windows-latest
    uses: ./.github/workflows/sdk.yml
    with:
      target: ${{ matrix.target }}
      runsOn: ${{ matrix.host }}

  build:
    name: Build - ${{ matrix.unity-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        # Building the SDK with Unity 2022 requires ns2.1 - skipping for now
        unity-version: ['2019', '2020', '2021']
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Checkout submodules
        run: git submodule update --init --recursive src/sentry-dotnet

      - name: Load env
        id: env
        run: echo "unityVersion=$(./scripts/ci-env.ps1 "unity${{ matrix.unity-version }}")" >> $env:GITHUB_OUTPUT

      - run: echo "::add-mask::${{ secrets.LICENSE_SERVER_URL }}"

      - name: Restore Unity Packages
        uses: actions/cache@v3
        with:
          path: |
            samples/unity-of-bugs/Library/Packages
            temp/unity-packages/Library/ScriptAssemblies/*.TestRunner.*
          key: samples/unity-of-bugs|${{ steps.env.outputs.unityVersion }}-${{ hashFiles('samples/unity-of-bugs/Packages/packages-lock.json') }}

      - name: Start the Unity docker container
        # We must use the iOS version of the image instead of 'base' - Sentry.Unity.Editor.iOS.csproj requires some libraries.
        # Maybe we could just cache the needed file instead of pulling the 1 GB larger image on every build...
        run: ./scripts/ci-docker.sh '${{ matrix.unity-version }}' 'ios' '${{ secrets.UNITY_LICENSE_SERVER_CONFIG }}'
        shell: bash

      # Required by sentry-dotnet since 3.19.0
      - name: Install Android dotnet workflow
        run: dotnet workload install android --temp-dir "${{ runner.temp }}"

      - name: Download CLI
        run: ./scripts/download-sentry-cli.ps1

      - uses: vaind/download-artifact@cbec071ac01e26699bc70c82f63ef724b3b0a91d
        with:
          name: Android-sdk
          path: package-dev/Plugins/Android
          wait-timeout: 3600

      - uses: vaind/download-artifact@cbec071ac01e26699bc70c82f63ef724b3b0a91d
        with:
          name: Android-libraries
          path: modules/sentry-java/sentry-android-ndk/build/intermediates/merged_native_libs/release/out/lib
          wait-timeout: 3600

      - uses: vaind/download-artifact@cbec071ac01e26699bc70c82f63ef724b3b0a91d
        with:
          name: iOS-sdk
          path: package-dev/Plugins/iOS
          wait-timeout: 3600

      - uses: vaind/download-artifact@cbec071ac01e26699bc70c82f63ef724b3b0a91d
        with:
          name: macOS-sdk
          path: package-dev/Plugins/macOS
          wait-timeout: 3600

      - uses: vaind/download-artifact@cbec071ac01e26699bc70c82f63ef724b3b0a91d
        with:
          name: Linux-sdk
          path: package-dev/Plugins/Linux
          wait-timeout: 3600

      - uses: vaind/download-artifact@cbec071ac01e26699bc70c82f63ef724b3b0a91d
        with:
          name: Windows-sdk
          path: package-dev/Plugins/Windows
          wait-timeout: 3600

      - name: Build Sentry.Unity Solution
        run: docker exec unity dotnet build /p:AndroidSdkDirectory=$env:ANDROID_HOME /p:JavaSdkDirectory=$env:JAVA_HOME_11_X64 -c Release

      - name: Assembly alias
        shell: bash
        run: |
          docker exec unity bash -c 'dotnet tool install --global Alias --version 0.4.3 && \
          ~/.dotnet/tools/assemblyalias --target-directory "package-dev/Runtime" --internalize --prefix "Sentry." --assemblies-to-alias "Microsoft*;System*"'

      - name: Package for release
        if: ${{ matrix.unity-version == env.LOWEST_SUPPORTED_UNITY_VERSION }}
        run: |
          # Before packaging, we need to open & close Unity on the sample project to update .meta files in package-dev.
          # We could add a new custom target but reusing UnityConfigureSentryOptions is good enough.
          docker exec unity dotnet msbuild /t:UnityConfigureSentryOptions /p:Configuration=Release /p:OutDir=other src/Sentry.Unity
          ./scripts/pack.ps1

      - name: Upload release artifacts
        uses: actions/upload-artifact@v3
        if: ${{ matrix.unity-version == env.LOWEST_SUPPORTED_UNITY_VERSION }}
        with:
          name: ${{ github.sha }}
          if-no-files-found: error
          # Adding the native libraries so the symbol collector craft target can find/upload them
          path: |
            package-release.zip
            modules/sentry-java/sentry-android-ndk/build/intermediates/merged_native_libs/release/out/lib/*

      - name: Run Unity tests (playmode)
        run: |
          docker exec unity dotnet msbuild /t:UnityConfigureSentryOptions /p:TestDsn= /p:Configuration=Release /p:OutDir=other src/Sentry.Unity
          docker exec unity dotnet msbuild /t:UnityPlayModeTest /p:Configuration=Release /p:OutDir=other test/Sentry.Unity.Tests

      - name: Upload test artifacts (playmode)
        if: ${{ failure() }}
        uses: actions/upload-artifact@v3
        with:
          name: Test results (playmode)
          path: artifacts/test/playmode

      - name: Run Unity tests (editmode)
        run: docker exec unity dotnet msbuild /t:UnityEditModeTest /p:Configuration=Release /p:OutDir=other test/Sentry.Unity.Editor.Tests

      - name: Upload test artifacts (editmode)
        if: ${{ failure() }}
        uses: actions/upload-artifact@v3
        with:
          name: Test results (editmode)
          path: artifacts/test/editmode

  package-validation:
    name: UPM Package validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download UPM package
        uses: vaind/download-artifact@cbec071ac01e26699bc70c82f63ef724b3b0a91d
        with:
          name: ${{ github.sha }}
          wait-timeout: 3600

      - name: Verify package content against snapshot
        # If this step fails, you can accept the new file content by
        # running the following script locally with 'accept' as an argument
        # and committing the new snapshot file to your branch. i.e:
        # ./test/Scripts.Tests/test-pack-contents.ps1 accept
        run: ./test/Scripts.Tests/test-pack-contents.ps1

  # This produces the `samples/IntegrationTest` as `smoke-test-${{ matrix.unity-version }}`. If running on the `main`
  # branch, the project doesn't include Sentry SDK because in that case we test building with & without it.
  # We could just create the project later in `smoke-test-build` but then it's executed for each job in the matrix
  # and reduces concurrency because of Unity licence limits.
  smoke-test-create:
    name: Prepare Smoke Test ${{ matrix.unity-version }}
    runs-on: ubuntu-latest
    needs: [package-validation]
    strategy:
      fail-fast: false
      matrix:
        unity-version: ['2019', '2020', '2021', '2022']
    env:
      UNITY_PATH: docker exec unity unity-editor
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - run: echo "::add-mask::${{ secrets.LICENSE_SERVER_URL }}"

      - name: Start the Unity docker container
        run: ./scripts/ci-docker.sh '${{ matrix.unity-version }}' 'base' '${{ secrets.UNITY_LICENSE_SERVER_CONFIG }}'
        shell: bash

      - name: Create new Project
        run: ./test/Scripts.Integration.Test/create-project.ps1 -UnityPath "${{ env.UNITY_PATH }}"

      - name: Download UPM package
        if: ${{ github.ref_name != 'main' }}
        uses: actions/download-artifact@v3
        with:
          name: ${{ github.sha }}

      - name: Extract UPM package
        if: ${{ github.ref_name != 'main' }}
        run: ./test/Scripts.Integration.Test/extract-package.ps1

      - name: Add Sentry to the project
        if: ${{ github.ref_name != 'main' }}
        run: ./test/Scripts.Integration.Test/add-sentry.ps1 -UnityPath "${{ env.UNITY_PATH }}"

      # We create tar explicitly because upload-artifact is slow for many files located in Library
      - name: Create archive
        run: tar -cvzf test-project.tar.gz samples/IntegrationTest

      - name: Upload project
        uses: actions/upload-artifact@v3
        with:
          name: smoke-test-${{ matrix.unity-version }}
          if-no-files-found: error
          path: test-project.tar.gz

  # A Linux, docker-based build to prepare a game ("player") for some platforms. The tests run in `smoke-test-run`.
  smoke-test-build:
    name: Build ${{ matrix.platform }} Smoke Test - ${{ matrix.unity-version }}
    needs: [smoke-test-create]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        unity-version: ['2019', '2020', '2021', '2022']
        platform: ['Android', 'WebGL', 'Linux', 'iOS']
        include:
          - platform: Linux
            image-suffix: '-il2cpp'
    env:
      UNITY_PATH: docker exec unity unity-editor
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - run: echo "::add-mask::${{ secrets.LICENSE_SERVER_URL }}"

      - name: Start the Unity docker container
        run: ./scripts/ci-docker.sh '${{ matrix.unity-version }}' '${{ matrix.platform }}${{ matrix.image-suffix }}' '${{ secrets.UNITY_LICENSE_SERVER_CONFIG }}'
        shell: bash

      - name: Download IntegrationTest project
        uses: actions/download-artifact@v3
        with:
          name: smoke-test-${{ matrix.unity-version }}

      - name: Extract project archive
        run: tar -xvzf test-project.tar.gz

      - name: Build without Sentry SDK
        # This hasn't broken for many months, so disabling on PRs to speed up CI. And also to test a clean build with Sentry SDK included.
        if: ${{ github.ref_name == 'main' }}
        run: ./test/Scripts.Integration.Test/build-project.ps1 -UnityPath "${{ env.UNITY_PATH }}" -Platform "${{ matrix.platform }}"

      - name: Download UPM package
        uses: actions/download-artifact@v3
        with:
          name: ${{ github.sha }}

      - name: Extract UPM package
        run: ./test/Scripts.Integration.Test/extract-package.ps1

      - name: Add Sentry to the project
        if: ${{ github.ref_name == 'main' }}
        run: ./test/Scripts.Integration.Test/add-sentry.ps1 -UnityPath "${{ env.UNITY_PATH }}"

      - name: Configure Sentry
        run: ./test/Scripts.Integration.Test/configure-sentry.ps1 -UnityPath "${{ env.UNITY_PATH }}" -Platform "${{ matrix.platform }}" -CheckSymbols

      - name: Build with Sentry SDK
        run: ./test/Scripts.Integration.Test/build-project.ps1 -UnityPath "${{ env.UNITY_PATH }}" -Platform "${{ matrix.platform }}" ${{ matrix.platform != 'iOS' && '-CheckSymbols' || '' }} -UnityVersion "${{ matrix.unity-version }}"

      - name: Upload test app
        uses: actions/upload-artifact@v3
        with:
          name: testapp-${{ matrix.platform }}-${{ matrix.unity-version }}
          if-no-files-found: error
          path: |
            samples/IntegrationTest/Build
            !samples/IntegrationTest/Build/*_BackUpThisFolder_ButDontShipItWithYourGame

      - name: Upload IntegrationTest project on failure
        if: ${{ failure() }}
        uses: actions/upload-artifact@v3
        with:
          name: failed-project-${{ matrix.platform }}-${{ matrix.unity-version }}
          path: |
            samples/IntegrationTest
            !samples/IntegrationTest/Build/*_BackUpThisFolder_ButDontShipItWithYourGame

  desktop-smoke-test:
    name: Run ${{ matrix.os }} Smoke Test - ${{ matrix.unity-version }}
    needs: [smoke-test-create]
    runs-on: ${{ matrix.os }}-latest
    strategy:
      fail-fast: false
      matrix:
        unity-version: ['2019', '2020', '2021', '2022']
        os: ['windows', 'macos']
        include:
          - os: windows
            unity-modules: windows-il2cpp
            unity-config-path: C:/ProgramData/Unity/config/
          - os: macos
            unity-modules: mac-il2cpp
            unity-config-path: /Library/Application Support/Unity/config/
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Load env
        id: env
        run: echo "unityVersion=$(./scripts/ci-env.ps1 "unity${{ matrix.unity-version }}")" >> $env:GITHUB_OUTPUT

      - name: Setup Unity
        uses: getsentry/setup-unity@46c2e082d98cc3a825a5b59038cb31705fe9ff56
        with:
          unity-version: ${{ steps.env.outputs.unityVersion }}
          unity-modules: ${{ matrix.unity-modules }}

      - run: echo "::add-mask::${{ secrets.LICENSE_SERVER_URL }}"

      - name: Create Unity license config
        run: |
          New-Item -Path '${{ matrix.unity-config-path }}' -ItemType Directory
          Set-Content -Path '${{ matrix.unity-config-path }}services-config.json' -Value '${{ secrets.UNITY_LICENSE_SERVER_CONFIG }}'

      - name: Download IntegrationTest project
        uses: actions/download-artifact@v3
        with:
          name: smoke-test-${{ matrix.unity-version }}

      - name: Extract project archive
        run: tar -xvzf test-project.tar.gz

      - name: Build without Sentry SDK
        # This hasn't broken for many months, so disabling on PRs to speed up CI. And also to test a clean build with Sentry SDK included.
        if: ${{ github.ref_name == 'main' }}
        run: ./test/Scripts.Integration.Test/build-project.ps1 -UnityPath "${{ env.UNITY_PATH }}"

      - name: Download UPM package
        uses: actions/download-artifact@v3
        with:
          name: ${{ github.sha }}

      - name: Extract UPM package
        run: ./test/Scripts.Integration.Test/extract-package.ps1

      - name: Add Sentry to the project
        if: ${{ github.ref_name == 'main' }}
        run: ./test/Scripts.Integration.Test/add-sentry.ps1 -UnityPath "${{ env.UNITY_PATH }}"

      - name: Configure Sentry
        run: ./test/Scripts.Integration.Test/configure-sentry.ps1 -UnityPath "${{ env.UNITY_PATH }}" -CheckSymbols

      - name: Build with Sentry SDK
        run: ./test/Scripts.Integration.Test/build-project.ps1 -UnityPath "${{ env.UNITY_PATH }}" -CheckSymbols -UnityVersion "${{ matrix.unity-version }}"

      - name: Run Smoke Test
        run: ./test/Scripts.Integration.Test/run-smoke-test.ps1 -Smoke

      - name: Run Crash Test
        run: ./test/Scripts.Integration.Test/run-smoke-test.ps1 -Crash

  android-smoke-test:
    needs: [smoke-test-build]
    name: Run Android ${{ matrix.api-level }} Unity ${{ matrix.unity-version }} Smoke Test
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        api-level: [27, 28, 29, 30, 31, latest] # last updated October 2022
        unity-version: ['2019', '2020', '2021', '2022']
        include:
          # API 21 is barely used but let's check it as the minimum supported version for now.
          - api-level: 21
            unity-version: 2019
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download test app artifact
        uses: actions/download-artifact@v3
        with:
          name: testapp-Android-${{ matrix.unity-version }}
          path: samples/IntegrationTest/Build

      - name: Setup HAXM
        run: |
          brew install --cask intel-haxm
          kextstat

      # outputs variables: api-level, label, target
      - name: Configure Android Settings
        id: droid-settings
        run: |
          # Setup API Level
          $apiLevel = '${{ matrix.api-level }}'
          if ( $apiLevel -eq 'latest')
          {
            # Gets the latest API level that isn't in Beta/Alpha
            $response = (Invoke-WebRequest -UseBasicParsing -Uri "https://developer.android.com/studio/releases/platforms").Content
            $result = [regex]::Match($response, " \(API level (?<model>\d+)\)")
            $apiLevel = $result.Groups["model"].Value
            Write-Output "Latest API is $apiLevel"
            $label = "$apiLevel (latest)"
          }
          else
          {
            Write-Output "Current API is $apiLevel"
          }
          "api-level=$apiLevel" >> $env:GITHUB_OUTPUT
          "label=$($label ?? $apiLevel)" >> $env:GITHUB_OUTPUT

      - name: Android API ${{ steps.droid-settings.outputs.label }} emulator setup + Smoke test
        id: smoke-test
        timeout-minutes: 15
        uses: reactivecircus/android-emulator-runner@76c2bf6f95ed6458fd659a1bdb680a0f8df232dc
        with:
          api-level: ${{ steps.droid-settings.outputs.api-level }}
          force-avd-creation: false
          ram-size: 2048M
          arch: x86_64
          cores: 2
          disk-size: 4096M # Some runs have out of storage error when installing the smoke test.
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none -accel on
          disable-animations: false
          script: pwsh ./scripts/smoke-test-droid.ps1 -IsIntegrationTest

      - name: Kill emulator if AVD failed.
        if: ${{ steps.smoke-test.outputs.status != 'success' }}
        run: |
          Write-Host "Smoke test failed with status (${{ steps.smoke-test.outputs.status }}), closing simulator."
          adb emu kill
          sleep 7

      - name: Android API ${{ steps.droid-settings.outputs.label }} emulator setup + Smoke test (Retry)
        timeout-minutes: 15
        # Retry the tests if the previous fail happened on the emulator startup.
        if: ${{ (steps.smoke-test.outputs.status == 'flaky') || (steps.smoke-test.outputs.status == '') }}
        uses: reactivecircus/android-emulator-runner@76c2bf6f95ed6458fd659a1bdb680a0f8df232dc
        with:
          api-level: ${{ steps.droid-settings.outputs.api-level }}
          force-avd-creation: false
          ram-size: 2048M
          arch: x86_64
          cores: 2
          disk-size: 4096M # Some runs have out of storage error when installing the smoke test.
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none -accel on
          disable-animations: false
          script: |
            echo "::Warning::Retrying Android API ${{ steps.droid-settings.outputs.label }} test due to previous step failure: '${{ steps.smoke-test.outputs.status }}'"
            pwsh ./scripts/smoke-test-droid.ps1 -IsIntegrationTest

      - name: Upload screenshot if smoke test failed
        if: ${{ failure() }}
        uses: actions/upload-artifact@v3
        with:
          name: testapp-android-screenshot-${{ matrix.api-level }}-${{ matrix.unity-version }}
          path: samples/IntegrationTest/Build/screen.png

  ios-smoke-test-build:
    needs: [smoke-test-build]
    name: Compile iOS Smoke Test - ${{ matrix.unity-version }}
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        unity-version: ['2019', '2020', '2021', '2022']
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download XCode app artifact
        uses: actions/download-artifact@v3
        with:
          name: testapp-iOS-${{ matrix.unity-version }}
          path: samples/IntegrationTest/Build

      - name: Build iOS package
        run: ./Scripts/smoke-test-ios.ps1 Build -IsIntegrationTest -UnityVersion "${{ matrix.unity-version }}"

      - name: Upload iOS test app for smoke test.
        uses: actions/upload-artifact@v3
        with:
          name: testapp-iOS-compiled-${{ matrix.unity-version }}
          # Ignore the files that are not required for the test.
          path: |
            samples/IntegrationTest/Build/archive/Unity-iPhone/Build/Products/Release-iphonesimulator/
            !**/Release-iphonesimulator/*.dSYM
            !**/Release-iphonesimulator/UnityFramework.framework/*

  ios-smoke-test-run:
    needs: [ios-smoke-test-build]
    name: Run iOS ${{ matrix.ios }} Smoke Test - ${{ matrix.unity-version }}
    runs-on: macos-12
    strategy:
      fail-fast: false
      matrix:
        unity-version: ['2019', '2020', '2021', '2022']
        # Check https://support.apple.com/en-us/HT201222 for the latest minor version for a given major one.
        # That page also shows which iPhones are supported with whith iOS version, therefore we don't need to test
        # iOS 13 and 14 because there are no devices that support those version while not supporting iOS 15.
        # On the other hand https://developer.apple.com/support/app-store/ shows 14 % phones and 18 % tablets use iOS 14
        # as of May 31, 2022. Therefore, let's stick to testing iOS 14 until 2023.
        # Numbers as string otherwise GH will reformat the runtime numbers removing the fractions.
        # Also make sure to match the versions available here:
        #  - https://github.com/actions/runner-images/blob/main/images/macos/macos-11-Readme.md
        #  - https://github.com/actions/runner-images/blob/main/images/macos/macos-12-Readme.md
        ios: ['12.4', '14.5', '15.4', latest] # last updated October 2022

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download app artifact
        uses: actions/download-artifact@v3
        with:
          name: testapp-iOS-compiled-${{ matrix.unity-version }}
          path: samples/IntegrationTest/Build/archive/Unity-iPhone/Build/Products/Release-iphonesimulator

      - name: Setup xcode-install
        # Github Virtual machine already sets the runtime and simulator for the latest release.
        if: ${{ matrix.ios != 'latest'}}
        run: gem install xcode-install

      - name: Setup ${{matrix.ios}} runtime
        if: ${{ matrix.ios != 'latest'}}
        run: xcversion simulators --install='iOS ${{matrix.ios}}'

      - name: Setup ${{matrix.ios}} Simulator
        if: ${{ matrix.ios != 'latest' }}
        # We need to setup an simulator in order to xCode to populate the simulators for the given runtime.
        run: xcrun simctl create InitialSimulator "iPhone 8" "iOS${{ matrix.ios }}"

      - name: Smoke test
        id: smoke-test-ios
        timeout-minutes: 10
        run: |
          $runtime = "${{ matrix.ios }}"
          If ($runtime -ne "latest")
          {
            $runtime = "iOS " + $runtime
          }
          ./Scripts/smoke-test-ios.ps1 Test "$runtime" -IsIntegrationTest

  smoke-test-run:
    needs: [smoke-test-build]
    name: Run  ${{ matrix.platform }} Unity ${{ matrix.unity-version }} Smoke Test
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        unity-version: ['2019', '2020', '2021', '2022']
        platform: ['WebGL', 'Linux']
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download test app artifact
        uses: actions/download-artifact@v3
        id: download
        with:
          name: testapp-${{ matrix.platform }}-${{ matrix.unity-version }}
          path: samples/IntegrationTest/Build

      - name: Run (WebGL)
        if: ${{ matrix.platform == 'WebGL' }}
        timeout-minutes: 10
        run: |
          pip3 install --upgrade --user selenium urllib3 requests
          python3 scripts/smoke-test-webgl.py "${{steps.download.outputs.download-path}}"

      - name: Run Smoke Test (Linux)
        if: ${{ matrix.platform == 'Linux' }}
        run: ./test/Scripts.Integration.Test/run-smoke-test.ps1 -Smoke

      - name: Run Crash Test (Linux)
        if: ${{ matrix.platform == 'Linux' }}
        run: ./test/Scripts.Integration.Test/run-smoke-test.ps1 -Crash
