name: CI

on:
  push:
    paths-ignore:
      - '**.md'
      - '**.txt'
  workflow_dispatch: # e.g. to manually trigger on foreign PRs

env:
  LOWEST_SUPPORTED_UNITY_VERSION: 2019
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  DOTNET_NOLOGO: 1

jobs:
  cancel-previous-workflow:
    runs-on: ubuntu-latest
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@a40b8845c0683271d9f53dfcb887a7e181d3918b # Tag: 0.9.1
        with:
          access_token: ${{ github.token }}

  android-sdk:
    uses: ./.github/workflows/sdk.yml
    with:
      target: Android
      runsOn: ubuntu-latest

  ios-sdk:
    uses: ./.github/workflows/sdk.yml
    with:
      target: iOS
      runsOn: macos-latest

  macos-sdk:
    uses: ./.github/workflows/sdk.yml
    with:
      target: macOS
      runsOn: macos-latest

  linux-sdk:
    uses: ./.github/workflows/sdk.yml
    with:
      target: Linux
      runsOn: ubuntu-latest

  windows-sdk:
    uses: ./.github/workflows/sdk.yml
    with:
      target: Windows
      runsOn: windows-latest

  build:
    name: Build - ${{ matrix.unity-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        # 2022.1.0a12 removed until S.T.J issues fixed
        unity-version: ['2019', '2020', '2021']
    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.3

      - name: Checkout submodules
        run: ./scripts/init-submodules.sh src/sentry-dotnet

      - name: Load env
        id: env
        shell: pwsh
        run: echo "::set-output name=unityVersion::$(./scripts/ci-env.ps1 "unity${{ matrix.unity-version }}")"

      - run: echo "::add-mask::${{ secrets.LICENSE_SERVER_URL }}"

      - name: Restore Unity Packages
        uses: actions/cache@v2
        with:
          path: |
            samples/unity-of-bugs/Library/Packages
            temp/unity-packages/Library/ScriptAssemblies/*.TestRunner.*
          key: samples/unity-of-bugs|${{ steps.env.outputs.unityVersion }}-${{ hashFiles('samples/unity-of-bugs/Packages/packages-lock.json') }}

      - name: Start the Unity docker container
        # 1. We use the host dotnet installation - it's much faster than installing inside the docker container.
        # 2. We must use the iOS version of the image instead of 'base' - Sentry.Unity.Editor.iOS.csproj requires some libraries.
        #    Maybe we could just cache the needed file instead of pulling the 1 GB larger image on every build...
        run: |
          image="unityci/editor:ubuntu-${{ steps.env.outputs.unityVersion }}-ios-1.0.1"
          docker run -td --name unity \
            -v ${{ github.workspace }}:/sentry-unity \
            -v /usr/share/dotnet:/usr/share/dotnet \
            -v /opt/microsoft/powershell/7:/opt/microsoft/powershell/7 \
            --workdir /sentry-unity $image
          docker exec unity ln -s /usr/share/dotnet/dotnet /usr/bin/dotnet
          docker exec unity ln -s /opt/microsoft/powershell/7/pwsh /usr/bin/pwsh

      - uses: vaind/download-artifact@989a39a417730897d098ab11c34e49ac4e13ed70
        with:
          name: Android-sdk
          path: package-dev/Plugins/Android
          wait-timeout: 3600

      - uses: vaind/download-artifact@989a39a417730897d098ab11c34e49ac4e13ed70
        with:
          name: Android-libraries
          path: modules/sentry-java/sentry-android-ndk/build/intermediates/merged_native_libs/release/out/lib
          wait-timeout: 3600

      - uses: vaind/download-artifact@989a39a417730897d098ab11c34e49ac4e13ed70
        with:
          name: iOS-sdk
          path: package-dev/Plugins/iOS
          wait-timeout: 3600

      - uses: vaind/download-artifact@989a39a417730897d098ab11c34e49ac4e13ed70
        with:
          name: macOS-sdk
          path: package-dev/Plugins/macOS
          wait-timeout: 3600

      - uses: vaind/download-artifact@989a39a417730897d098ab11c34e49ac4e13ed70
        with:
          name: Linux-sdk
          path: package-dev/Plugins/Linux
          wait-timeout: 3600

      - uses: vaind/download-artifact@989a39a417730897d098ab11c34e49ac4e13ed70
        with:
          name: Windows-sdk
          path: package-dev/Plugins/Windows
          wait-timeout: 3600

      - name: Create Unity license config
        run: |
          docker exec unity mkdir -p /usr/share/unity3d/config/
          echo '${{ secrets.UNITY_LICENSE_SERVER_CONFIG }}' | docker exec -i unity sh -c "cat > /usr/share/unity3d/config/services-config.json"

      - name: Install Unity UPM Packages
        run: docker exec unity dotnet msbuild /t:UnityRestorePackages /p:Configuration=Release /p:OutDir=other src/Sentry.Unity

      - name: Build Sentry.Unity Solution
        run: docker exec unity dotnet build -c Release

      - name: Assembly alias
        run: |
          docker exec unity bash -c 'dotnet tool install --global Alias --version 0.4.3 && \
          ~/.dotnet/tools/assemblyalias --target-directory "package-dev/Runtime" --internalize --prefix "Sentry." --assemblies-to-alias "Microsoft*;System*"'

      - name: Update .meta files before packaging
        # We need to open & close Unity on the sample project to update .meta files in package-dev.
        # We could add a new custom target but reusing UnityConfigureSentryOptions is good enough.
        run: docker exec unity dotnet msbuild /t:UnityConfigureSentryOptions /p:Configuration=Release /p:OutDir=other src/Sentry.Unity

      - name: Prepare Sentry package for release
        shell: pwsh
        run: ./scripts/pack.ps1

      - name: Upload release artifacts
        uses: actions/upload-artifact@v2
        if: ${{ matrix.unity-version == env.LOWEST_SUPPORTED_UNITY_VERSION }}
        with:
          name: ${{ github.sha }}
          if-no-files-found: error
          # Adding the native libraries so the symbol collector craft target can find/upload them
          path: |
            package-release.zip
            modules/sentry-java/sentry-android-ndk/build/intermediates/merged_native_libs/release/out/lib/*

      - name: Run Unity tests (playmode)
        run: |
          docker exec unity dotnet msbuild /t:UnityConfigureSentryOptions /p:TestDsn= /p:Configuration=Release /p:OutDir=other src/Sentry.Unity
          docker exec unity dotnet msbuild /t:UnityPlayModeTest /p:Configuration=Release /p:OutDir=other test/Sentry.Unity.Tests

      - name: Upload test artifacts (playmode)
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: Test results (playmode)
          path: artifacts/test/playmode

      - name: Run Unity tests (editmode)
        run: docker exec unity dotnet msbuild /t:UnityEditModeTest /p:Configuration=Release /p:OutDir=other test/Sentry.Unity.Editor.Tests

      - name: Upload test artifacts (editmode)
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: Test results (editmode)
          path: artifacts/test/editmode

  # A Linux, docker-based build to prepare a game ("player") for some platforms. The tests run in `smoke-test-run`.
  smoke-test-build:
    name: Build ${{ matrix.platform }} Smoke Test - ${{ matrix.unity-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        unity-version: ['2019', '2020', '2021']
        platform: ['Android', 'WebGL', 'Linux', 'iOS']
        include:
          - platform: Linux
            image-suffix: '-il2cpp'
    env:
      UNITY_PATH: docker exec unity unity-editor
    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.3

      - name: Load env
        id: env
        run: echo "::set-output name=unityVersion::$(pwsh ./scripts/ci-env.ps1 "unity${{ matrix.unity-version }}")"

      - run: echo "::add-mask::${{ secrets.LICENSE_SERVER_URL }}"

      - name: Start the Unity docker container
        run: |
          image="unityci/editor:ubuntu-${{ steps.env.outputs.unityVersion }}-${{ matrix.platform }}${{ matrix.image-suffix }}-1.0.1"
          image=$(echo "$image" | tr '[:upper:]' '[:lower:]')
          echo "Starting up a docker container with $image"
          docker run -td --name unity -v ${{ github.workspace }}:/sentry-unity --workdir /sentry-unity $image

      - name: Create Unity license config
        run: |
          docker exec unity mkdir -p /usr/share/unity3d/config/
          echo '${{ secrets.UNITY_LICENSE_SERVER_CONFIG }}' | docker exec -i unity sh -c "cat > /usr/share/unity3d/config/services-config.json"

      - name: Create new Project
        run: sudo pwsh ./test/Scripts.Integration.Test/integration-create-project.ps1 -UnityPath "${{ env.UNITY_PATH }}"

      - name: Build without Sentry SDK
        run: sudo pwsh ./test/Scripts.Integration.Test/integration-build-project.ps1 -UnityPath "${{ env.UNITY_PATH }}" -Platform "${{ matrix.platform }}"

      - name: Download UPM package
        uses: vaind/download-artifact@989a39a417730897d098ab11c34e49ac4e13ed70
        with:
          name: ${{ github.sha }}
          wait-timeout: 3600

      - name: Extract UPM package
        run: sudo pwsh ./test/Scripts.Integration.Test/integration-extract-package.ps1

      - name: Add Sentry to the project
        run: sudo pwsh ./test/Scripts.Integration.Test/integration-update-sentry.ps1 -UnityPath "${{ env.UNITY_PATH }}" -Platform "${{ matrix.platform }}"

      - name: Build with Sentry SDK
        run: sudo pwsh ./test/Scripts.Integration.Test/integration-build-project.ps1 -UnityPath "${{ env.UNITY_PATH }}" -Platform "${{ matrix.platform }}" ${{ matrix.platform != 'iOS' && '-CheckSymbols' || '' }}

      - name: Prepare for upload
        run: |
          cd samples/IntegrationTest/Build
          sudo chown -R $(id -u):$(id -g) .
          sudo rm -rf *_BackUpThisFolder_ButDontShipItWithYourGame

      - name: Upload test app for smoke test
        uses: actions/upload-artifact@v2
        with:
          name: testapp-${{ matrix.platform }}-${{ matrix.unity-version }}
          path: samples/IntegrationTest/Build
          if-no-files-found: error

      - name: Upload IntegrationTest project on failure
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: failed-project-${{ matrix.platform }}-${{ matrix.unity-version }}
          path: samples/IntegrationTest

  package-validation:
    needs: [build]
    name: UPM Package validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.3

      - name: Download UPM package
        uses: actions/download-artifact@v2
        with:
          # Artifact name is the commit sha. Which is what craft uses to find the relevant artifact.
          name: ${{ github.sha }}

      - name: Verify package content against snapshot
        shell: pwsh
        # If this step fails, you can accept the new file content by
        # running the following script locally with 'accept' as an argument
        # and committing the new snapshot file to your branch. i.e:
        # pwsh ./test/Scripts.Tests/test-pack-contents.ps1 accept
        run: ./test/Scripts.Tests/test-pack-contents.ps1

  desktop-smoke-test:
    name: Run ${{ matrix.os }} Smoke Test - ${{ matrix.unity-version }}
    runs-on: ${{ matrix.os }}-latest
    strategy:
      fail-fast: false
      matrix:
        unity-version: ['2019', '2020', '2021']
        os: ['windows', 'macos']
        include:
          - os: windows
            unity-modules: windows-il2cpp
            unity-config-path: C:/ProgramData/Unity/config/
          - os: macos
            unity-modules: mac-il2cpp
            unity-config-path: /Library/Application Support/Unity/config/
    defaults:
      run:
        shell: pwsh
    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.3

      - name: Load env
        id: env
        run: echo "::set-output name=unityVersion::$(./scripts/ci-env.ps1 "unity${{ matrix.unity-version }}")"

      - name: Setup Unity
        uses: getsentry/setup-unity@46c2e082d98cc3a825a5b59038cb31705fe9ff56
        with:
          unity-version: ${{ steps.env.outputs.unityVersion }}
          unity-modules: ${{ matrix.unity-modules }}

      - run: echo "::add-mask::${{ secrets.LICENSE_SERVER_URL }}"

      - name: Create Unity license config
        run: |
          New-Item -Path '${{ matrix.unity-config-path }}' -ItemType Directory
          Set-Content -Path '${{ matrix.unity-config-path }}services-config.json' -Value '${{ secrets.UNITY_LICENSE_SERVER_CONFIG }}'

      - name: Create new Project
        run: ./test/Scripts.Integration.Test/integration-create-project.ps1 -UnityPath "${{ env.UNITY_PATH }}"

      - name: Build Standalone Player without Sentry SDK
        run: ./test/Scripts.Integration.Test/integration-build-project.ps1 -UnityPath "${{ env.UNITY_PATH }}"

      - name: Download UPM package
        uses: vaind/download-artifact@989a39a417730897d098ab11c34e49ac4e13ed70
        with:
          # Artifact name is the commit sha. Which is what craft uses to find the relevant artifact.
          name: ${{ github.sha }}
          wait-timeout: 3600

      - name: Extract UPM package
        run: ./test/Scripts.Integration.Test/integration-extract-package.ps1

      - name: Add Sentry to test project
        run: ./test/Scripts.Integration.Test/integration-update-sentry.ps1 -UnityPath "${{ env.UNITY_PATH }}"

      - name: Build Standalone Player Sentry SDK
        run: ./test/Scripts.Integration.Test/integration-build-project.ps1 -UnityPath "${{ env.UNITY_PATH }}" -CheckSymbols

      - name: Run Player - Smoke Test
        run: ./test/Scripts.Integration.Test/integration-run-smoke-test.ps1 -Smoke

      - name: Run Player - Crash Test
        run: ./test/Scripts.Integration.Test/integration-run-smoke-test.ps1 -Crash

  android-smoke-test:
    needs: [smoke-test-build]
    name: Run Android ${{ matrix.api-level }} Unity ${{ matrix.unity-version }} Smoke Test
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        api-level: [21, 27, 29, 30]
        unity-version: ['2019', '2020', '2021']
        exclude:
          # API 21 is no longer supported since Unity 2021.2.10f1
          - api-level: 21
            unity-version: '2021'
          # Smoke test currently crashes on API 30 with Unity 2021 build on CI, see issue #719
          - api-level: 30
            unity-version: '2021'
    defaults:
      run:
        shell: pwsh
    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.3

      - name: Download test app artifact
        uses: actions/download-artifact@v2
        with:
          name: testapp-Android-${{ matrix.unity-version }}
          path: samples/IntegrationTest/Build

      - name: Android emulator setup + Smoke test
        id: smoke-test
        continue-on-error: true
        timeout-minutes: 30
        uses: reactivecircus/android-emulator-runner@2b2ebf2e518e38a17180117fc2b677006db27330
        with:
          api-level: ${{ matrix.api-level }}
          #api-level 30 image is only available with google services.
          target: ${{ matrix.api-level == 30 && 'google_apis' || 'default' }}
          force-avd-creation: false
          ram-size: 2048M
          arch: x86
          cores: 2
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: false
          script: sudo pwsh ./scripts/smoke-test-droid.ps1 -IsCI -IsIntegrationTest

      - name: Kill emulator if AVD failed.
        if: ${{ steps.smoke-test.outputs.smoke-status != 'Completed' }}
        run: |
          Write-Host "Smoke test failed with status (${{ steps.smoke-test.outputs.smoke-status }}), closing simulator."
          adb emu kill
          sleep 7

      - name: Android emulator setup + Smoke test (Retry)
        id: smoke-test-retry
        continue-on-error: true
        timeout-minutes: 30
        # Retry the tests if the previous fail happened on the emulator startup.
        if: ${{ steps.smoke-test.outputs.smoke-status == 'Flaky' }}
        uses: reactivecircus/android-emulator-runner@2b2ebf2e518e38a17180117fc2b677006db27330
        with:
          api-level: ${{ matrix.api-level }}
          target: ${{ matrix.api-level == 30 && 'google_apis' || 'default' }}
          force-avd-creation: false
          ram-size: 2048M
          arch: x86
          cores: 2
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: false
          script: sudo pwsh ./scripts/smoke-test-droid.ps1 -IsCI -IsIntegrationTest

      - name: Throw error if Smoke test failed
        run: |
          $mainResult = '${{ steps.smoke-test.outputs.smoke-status }}'
          $retryResult = '${{ steps.smoke-test-retry.outputs.smoke-status }}'
          if (!($mainResult -eq 'Completed') -and !($mainResult -eq 'Flaky' -and $retryResult -eq 'Completed')) {
            Write-Error "Test: $mainResult; Retry: $retryResult"
          }

      - name: Upload screenshot if smoke test failed
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: testapp-android-screenshot-${{ matrix.api-level }}-${{ matrix.unity-version }}
          path: samples/IntegrationTest/Build/screen.png

  ios-smoke-test-build:
    needs: [smoke-test-build]
    name: Compile iOS Smoke Test - ${{ matrix.unity-version }}
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        unity-version: ['2019', '2020', '2021']
    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.3

      - name: Download XCode app artifact
        uses: actions/download-artifact@v2
        with:
          name: testapp-iOS-${{ matrix.unity-version }}
          path: samples/IntegrationTest/Build

      - name: Build iOS package
        shell: pwsh
        run: ./Scripts/smoke-test-ios.ps1 Build -IsIntegrationTest

      - name: Upload iOS test app for smoke test.
        uses: actions/upload-artifact@v2
        with:
          name: testapp-iOS-compiled-${{ matrix.unity-version }}
          # Ignore the files that are not required for the test.
          path: |
            samples/IntegrationTest/Build/archive/Unity-iPhone/Build/Products/Release-iphonesimulator/
            !**/Release-iphonesimulator/*.dSYM
            !**/Release-iphonesimulator/UnityFramework.framework/*

  ios-smoke-test-run:
    needs: [ios-smoke-test-build]
    name: Run iOS ${{ matrix.ios-runtime }} Smoke Test - ${{ matrix.unity-version }}
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        unity-version: ['2019', '2020', '2021']
        # Numbers as string otherwise GH will reformat the runtime numbers removing the fractions.
        ios-runtime: ['12.0', '12.4', '13.0', '14.1', latest]
    defaults:
      run:
        shell: pwsh
    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.3

      - name: Download app artifact
        uses: actions/download-artifact@v2
        with:
          name: testapp-iOS-compiled-${{ matrix.unity-version }}
          path: samples/IntegrationTest/Build/archive/Unity-iPhone/Build/Products/Release-iphonesimulator

      - name: Setup xcode-install
        # Github Virtual machine already sets the runtime and simulator for the latest release.
        if: ${{ matrix.ios-runtime != 'latest'}}
        run: gem install xcode-install

      - name: Setup ${{matrix.ios-runtime}} runtime
        if: ${{ matrix.ios-runtime != 'latest'}}
        run: xcversion simulators --install='iOS ${{matrix.ios-runtime}}'

      - name: Setup ${{matrix.ios-runtime}} Simulator
        if: ${{ matrix.ios-runtime != 'latest' }}
        # We need to setup an simulator in order to xCode to populate the simulators for the given runtime.
        run: xcrun simctl create InitialSimulator "iPhone 8" "iOS${{ matrix.ios-runtime }}"

      - name: Smoke test
        id: smoke-test-ios
        timeout-minutes: 10
        run: |
          $runtime = "${{ matrix.ios-runtime }}"
          If ($runtime -ne "latest")
          {
            $runtime = "iOS " + $runtime
          }
          ./Scripts/smoke-test-ios.ps1 Test "$runtime" -IsIntegrationTest

  smoke-test-run:
    needs: [smoke-test-build]
    name: Run  ${{ matrix.platform }} Unity ${{ matrix.unity-version }} Smoke Test
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        unity-version: ['2019', '2020', '2021']
        platform: ['WebGL', 'Linux']
    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.3

      - name: Download test app artifact
        uses: actions/download-artifact@v2
        id: download
        with:
          name: testapp-${{ matrix.platform }}-${{ matrix.unity-version }}
          path: samples/IntegrationTest/Build

      - name: Run (WebGL)
        if: ${{ matrix.platform == 'WebGL' }}
        timeout-minutes: 10
        run: |
          pip3 install --upgrade --user selenium urllib3 requests
          python3 scripts/smoke-test-webgl.py "${{steps.download.outputs.download-path}}"

      - name: Run (Linux)
        if: ${{ matrix.platform == 'Linux' }}
        run: pwsh ./test/Scripts.Integration.Test/integration-run-smoke-test.ps1 -Smoke -Crash
