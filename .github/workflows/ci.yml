name: CI

on:
  push:
    branches:
      - main
      - release/*

  pull_request:
    branches:
      - '*'

jobs:
  build:
    name: ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
      DOTNET_NOLOGO: 1
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest]
        unity-version: [2019.4.21f1]
        include:
          # - os: windows-latest
          #   unity-installation-path: C:/Program Files/Unity/
          #   unity-root: C:/Program Files/Unity/Hub/Editor/
          #   unity-path: Editor/
          - os: macos-latest
            unity-installation-path: /Applications/Unity/
            unity-root: /Applications/Unity/Hub/Editor/
            unity-path: Unity.app/Contents/MacOS
          - unity-version: 2019.4.21f1
            unity-version-changeset: b76dac84db26

    steps:
      # Tag: 0.9.1
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@a40b8845c0683271d9f53dfcb887a7e181d3918b
        with:
          access_token: ${{ github.token }}

      - name: Checkout
        uses: actions/checkout@v2.3.3
        with:
          submodules: recursive

      # Unity is about 4GB in size and takes 20 minutes to download and install.
      # Caching still takes some time, but brings it down to about 5 minutes.
      - name: Restore cached Unity installation
        id: cache-unity
        uses: actions/cache@v2
        with:
          path: ${{ matrix.unity-installation-path }}
          key: ${{ matrix.os }}-${{ matrix.unity-version }}-${{ matrix.unity-version-changeset }}

      - name: Restore previous build
        uses: actions/cache@v2
        with:
          path: samples/artifacts/builds
          # using hash of package.json to bust cache on release builds which modify it
          key: ${{ matrix.os }}-${{ matrix.unity-version }}-${{ matrix.unity-version-changeset }}-${{ hashFiles('package/package.json') }}

      - name: Restore Unity Packages
        uses: actions/cache@v2
        with:
          path: samples/unity-of-bugs/Library
          key: ${{ matrix.os }}-${{ hashFiles('samples/unity-of-bugs/Packages/packages-lock.json') }}

      - name: Get submodule information
        run: |
          git submodule status > submodules-status
          cat submodules-status

      - name: Restore submodules build output
        if: ${{ !startsWith(github.ref, 'refs/feat/ci-caching') }}
        uses: actions/cache@v2
        with:
          path: |
            src/sentry-cocoa/Carthage/Build
            src/sentry-dotnet/**/bin/Release
            src/sentry-dotnet/**/obj/Release
            src/sentry-java/**/build
            src/sentry-java/.gradle/caches
            src/sentry-java/.gradle/wrapper
          # hash of package/package.json for cache busting on release builds (version bump)
          key: ${{ matrix.os }}-${{ hashFiles('submodules-status') }}-${{ hashFiles('package/package.json') }}

      - name: Setup Unity
        uses: kuler90/setup-unity@f44e3f35ce3737316a15321ec3468161940e23e8
        id: setup-unity
        with:
          unity-version: ${{ matrix.unity-version }}
          unity-version-changeset:  ${{ matrix.unity-version-changeset }}

      - name: Setup Unity Modules - Windows IL2CPP
        if: matrix.os == 'windows-latest'
        uses: kuler90/setup-unity@f44e3f35ce3737316a15321ec3468161940e23e8
        with:
          unity-version: ${{ matrix.unity-version }}
          unity-modules: windows-il2cpp

      - name: Setup Unity Modules - macOS IL2CPP
        if: matrix.os == 'macos-latest'
        uses: kuler90/setup-unity@f44e3f35ce3737316a15321ec3468161940e23e8
        with:
          unity-version: ${{ matrix.unity-version }}
          unity-modules: mac-il2cpp

      - name: Setup Unity Modules - Android
        uses: kuler90/setup-unity@f44e3f35ce3737316a15321ec3468161940e23e8
        with:
          unity-version: ${{ matrix.unity-version }}
          unity-modules: android

      - name: Setup Unity Modules - iOS
        uses: kuler90/setup-unity@f44e3f35ce3737316a15321ec3468161940e23e8
        with:
          unity-version: ${{ matrix.unity-version }}
          unity-modules: ios

      # Need to write to $GITHUB_PATH to make the environment variable available to other steps.
      - name: Add Unity on PATH
        shell: pwsh
        run: |
          Write-Output "${{ matrix.unity-root }}${{ matrix.unity-version }}/${{ matrix.unity-path }}" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      # Before we claim the license, lets build the SDKs which don't require Unity
      - name: Build the sentry-cocoa SDK
        run: dotnet msbuild /t:BuildCocoaSDK /p:Configuration=Release
      - name: Build the sentry-java SDK
        run: dotnet msbuild /t:BuildAndroidSDK /p:Configuration=Release

      # License activation sometimes fails due to a problem connecting to Unity's licensing backend. Retry a few times if it fails.
      - name: Activate Unity license
        id: activate-license
        shell: pwsh
        # Builds take upwards of 30 min, so wait up to 10 for a license to be available before failing the build
        run: |
          $attempts = 40

          while ($attempts -gt 0) {
            unity -quit -batchmode -nographics -noUpm -logFile - -serial ${{ secrets.UNITY_SERIAL }} -username ${{ secrets.UNITY_EMAIL }} -password ${{ secrets.UNITY_PASSWORD }} | Out-Default

            if ($LASTEXITCODE -eq 0) {
              break
            }

            Write-Host "License activation failed. Retrying..."
            Start-Sleep -Seconds 15
            $attempts--
          }

          if ($LASTEXITCODE -ne 0) {
            Write-Host "::error ::Failed to activate license after multiple attempts."
          }

      - name: Build Sentry.Unity Solution
        run: dotnet build -c Release

      - name: Run Unity tests (playmode)
        run: dotnet msbuild /t:UnityPlayModeTest /p:Configuration=Release

      - name: Run Unity tests (editmode)
        run: dotnet msbuild /t:UnityEditModeTest /p:Configuration=Release

      - name: Build Android Player with IL2CPP
        run: dotnet msbuild /t:UnityBuildPlayerAndroidIL2CPP /p:Configuration=Release

      - name: Build iOS Player
        if: matrix.os == 'macos-latest'
        run: dotnet msbuild /t:UnityBuildPlayerIOS /p:Configuration=Release

      - name: Build Standalone Player with IL2CPP
        run: dotnet msbuild /t:UnityBuildStandalonePlayerIL2CPP /p:Configuration=Release

      # Last step that requires running Unity should be above this

      # Professional licenses are per-seat so we should always try to return them
      - name: Return Unity license
        if: ${{ always() }}
        shell: pwsh
        run: |
          unity -quit -batchmode -nographics -noUpm -logFile - -returnlicense | Out-Default

      - name: Run Smoke Tests
        run: dotnet msbuild /t:UnitySmokeTestStandalonePlayerIL2CPP

      - name: Prepare Sentry package for release
        shell: pwsh
        run: ./scripts/pack.ps1

      - name: Upload build artifacts if build failed
        if: ${{ failure() }}
        uses: actions/upload-artifact@v1
        with:
          name: Build output
          path: artifacts/build

      - name: Upload release artifacts
        uses: actions/upload-artifact@v1
        with:
          name: ${{ github.sha }}
          path: package-release.zip

      - name: Upload Android Build
        uses: actions/upload-artifact@v1
        with:
          name: Android Build
          path: samples/artifacts/builds/Android

      - name: Upload test artifacts (playmode)
        uses: actions/upload-artifact@v1
        with:
          name: Test results (playmode)
          path: artifacts/test/playmode

      - name: Upload test artifacts (editmode)
        uses: actions/upload-artifact@v1
        with:
          name: Test results (editmode)
          path: artifacts/test/editmode
