name: "Build Unity SDK"
on:
  workflow_call:
    inputs:
      unity-version:
        required: true
        type: string

env:
  LOWEST_SUPPORTED_UNITY_VERSION: 2020
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  DOTNET_NOLOGO: 1
  GITHUB_ACTOR: ${{ github.actor }}
  GITHUB_SHA: ${{ github.sha }}
  UNITY_VERSION: ${{ inputs.unity-version }}

defaults:
  run:
    shell: pwsh

jobs:
  build:
    name: Build - ${{ inputs.unity-version }}
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3

      - name: Checkout submodules
        run: git submodule update --init --recursive src/sentry-dotnet

      - name: Load env
        id: env
        run: echo "unityVersion=$(./scripts/ci-env.ps1 "unity${env:UNITY_VERSION}")" >> $env:GITHUB_OUTPUT

      - run: echo "::add-mask::${{ secrets.LICENSE_SERVER_URL }}"

      - name: Restore Unity Packages
        uses: actions/cache@2f8e54208210a422b2efd51efaa6bd6d7ca8920f # v3
        with:
          path: |
            samples/unity-of-bugs/Library/Packages
            temp/unity-packages/Library/ScriptAssemblies/*.TestRunner.*
          key: samples/unity-of-bugs|${{ steps.env.outputs.unityVersion }}-${{ hashFiles('samples/unity-of-bugs/Packages/packages-lock.json') }}

      - name: Docker Login
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # pinned v3
        with:
          registry: ghcr.io
          username: ${{ env.GITHUB_ACTOR }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Start the Unity docker container
        run: ./scripts/ci-docker.sh "${UNITY_VERSION}" 'ios' '${{ secrets.UNITY_LICENSE_SERVER_CONFIG }}'
        shell: bash

      - name: Install .NET SDK
        if: runner.os != 'Windows'
        uses: actions/setup-dotnet@67a3573c9a986a3f9c594539f4ab511d57bb3ce9 # v4
        with:
          global-json-file: src/sentry-dotnet/global.json
        
      - name: Install Android dotnet workflow
        run: dotnet workload install android --temp-dir "${env:RUNNER_TEMP}"

      - name: Download CLI
        run: ./scripts/download-sentry-cli.ps1

      - name: Download Android SDK
        uses: vaind/download-artifact@e7141b6a94ef28aa3d828b52830cfa1f406a1848 # v4-with-wait-timeout
        with:
          name: Android-sdk
          path: package-dev/Plugins/Android
          wait-timeout: 3600

      - name: Download iOS SDK
        uses: vaind/download-artifact@e7141b6a94ef28aa3d828b52830cfa1f406a1848 # v4-with-wait-timeout
        with:
          name: iOS-sdk
          path: package-dev/Plugins/iOS
          wait-timeout: 3600

      - name: Download macOS SDK
        uses: vaind/download-artifact@e7141b6a94ef28aa3d828b52830cfa1f406a1848 # v4-with-wait-timeout
        with:
          name: macOS-sdk
          path: package-dev/Plugins/macOS
          wait-timeout: 3600

      - name: Download Linux SDK
        uses: vaind/download-artifact@e7141b6a94ef28aa3d828b52830cfa1f406a1848 # v4-with-wait-timeout
        with:
          name: Linux-sdk
          path: package-dev/Plugins/Linux
          wait-timeout: 3600

      - name: Download Windows SDK
        uses: vaind/download-artifact@e7141b6a94ef28aa3d828b52830cfa1f406a1848 # v4-with-wait-timeout
        with:
          name: Windows-sdk
          path: package-dev/Plugins/Windows
          wait-timeout: 3600

      - name: Build Sentry.Unity Solution
        run: docker exec unity dotnet build -c Release

      - name: Install assemblyalias
        run: docker exec unity dotnet tool install --global Alias --version 0.4.3 --allow-roll-forward

      - name: Alias editor assemblies
        run: docker exec unity /home/gh/.dotnet/tools/assemblyalias --target-directory "package-dev/Editor" --internalize --prefix "Sentry." --assemblies-to-alias "Microsoft*;Mono.Cecil*"

      - name: Alias runtime assemblies
        run: docker exec unity /home/gh/.dotnet/tools/assemblyalias --target-directory "package-dev/Runtime" --internalize --prefix "Sentry." --assemblies-to-alias "Microsoft*;System*"

      - name: Package for release
        if: ${{ env.UNITY_VERSION == env.LOWEST_SUPPORTED_UNITY_VERSION }}
        run: |
          docker exec unity dotnet msbuild /t:UnityConfigureSentryOptions /p:Configuration=Release /p:OutDir=other src/Sentry.Unity
          ./scripts/pack.ps1

      - name: Upload release artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        if: ${{ env.UNITY_VERSION == env.LOWEST_SUPPORTED_UNITY_VERSION }}
        with:
          name: ${{ env.GITHUB_SHA }}
          if-no-files-found: error
          path: |
            package-release.zip

      - name: Run Unity tests (playmode)
        run: |
          docker exec unity dotnet msbuild /t:UnityConfigureSentryOptions /p:TestDsn= /p:Configuration=Release /p:OutDir=other src/Sentry.Unity
          docker exec unity dotnet msbuild /t:UnityPlayModeTest /p:Configuration=Release /p:OutDir=other test/Sentry.Unity.Tests

      - name: Upload test artifacts (playmode)
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: Test results (playmode) - ${{ env.UNITY_VERSION }}
          path: artifacts/test/playmode

      - name: Run Unity tests (editmode)
        run: docker exec unity dotnet msbuild /t:UnityEditModeTest /p:Configuration=Release /p:OutDir=other test/Sentry.Unity.Editor.Tests

      - name: Upload test artifacts (editmode)
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: Test results (editmode) - ${{ env.UNITY_VERSION }}
          path: artifacts/test/editmode
