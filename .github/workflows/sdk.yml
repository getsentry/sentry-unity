on:
  workflow_call:
    inputs:
      runsOn:
        required: true
        type: string
      target:
        required: true
        type: string

env:
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  DOTNET_NOLOGO: 1

jobs:
  build:
    runs-on: ${{ inputs.runsOn }}
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v3

      - name: Select submodules
        id: env
        shell: bash
        run: |
          if [[ "${{ inputs.target }}" == "Android" ]]; then
            submodules="modules/sentry-java"
          else
            submodules="modules/sentry-native"
          fi
          
          echo "submodulesPath=$submodules" >> $GITHUB_OUTPUT
          echo "submodules=src/sentry-dotnet $submodules" >> $GITHUB_OUTPUT

      - name: Get submodule status
        run: git submodule status --cached ${{ steps.env.outputs.submodules }} | tee submodules-status

      - run: cp -r package-dev/Plugins/${{ inputs.target }} sdk-static || echo "never mind, no files checked in..."
        shell: bash

      - name: Restore from cache
        uses: actions/cache@v3
        id: cache
        with:
          # Note: native SDKs are cached and only built if the respective 'package-dev/Plugins/' directories are empty.
          # Output changes only depending on the git sha of the submodules
          # hash of package/package.json for cache busting on release builds (version bump)
          path: |
            package-dev/Plugins
          key: sdk=${{ inputs.target }}-${{ hashFiles('submodules-status', 'package/package.json', 'Directory.Build.targets', 'sdk-static/**') }}

      - name: Installing Linux Dependencies
        if: ${{ inputs.target == 'Linux'}}
        run: |
          sudo apt-get update
          sudo apt-get install zlib1g-dev libcurl4-openssl-dev libssl-dev
          # Ubuntu 22.04 -> 20.04 GLIBC Compatibility Solution
          sudo apt-get install -y gcc-multilib g++-multilib
          echo "CFLAGS=-Wl,--hash-style=both -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fstack-protector" >> $GITHUB_ENV
          echo "LDFLAGS=-Wl,--hash-style=both -Wl,--dynamic-linker=/lib64/ld-linux-x86-64.so.2" >> $GITHUB_ENV
          echo "CMAKE_FLAGS=-DCMAKE_C_FLAGS=\"-U__GLIBC_MINOR__ -D__GLIBC_MINOR__=26 -fPIC\" -DCMAKE_CXX_FLAGS=\"-U__GLIBC_MINOR__ -D__GLIBC_MINOR__=26 -fPIC\"" >> $GITHUB_ENV

      - name: Build
        run: |
          git submodule update --init --recursive ${{ steps.env.outputs.submodules }}
          dotnet msbuild /t:Build${{ inputs.target }}SDK /p:Configuration=Release /p:OutDir=other src/Sentry.Unity

      - name: Upload build logs on failure
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          path: ${{ steps.env.outputs.submodulesPath }}/build.log
          # Lower retention period - we only need this to retry CI.
          retention-days: 14

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.target }}-sdk
          path: package-dev/Plugins/${{ inputs.target }}
          # Lower retention period - we only need this to retry CI.
          retention-days: 14
