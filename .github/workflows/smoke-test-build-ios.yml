name: "SmokeTest: Build iOS"
on:
  workflow_call:
    inputs:
      unity-version:
        required: true
        type: string
  
defaults:
  run:
    shell: pwsh
  
jobs:
  build:
    name: ${{ inputs.unity-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - platform: iOS
            check_symbols: false
            build_platform: iOS
    env:
      GITHUB_ACTOR: ${{ github.actor }}
      GITHUB_SHA: ${{ github.sha }}
      UNITY_PATH: docker exec unity unity-editor
      UNITY_VERSION: ${{ inputs.unity-version }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3

      - run: echo "::add-mask::\"$LICENSE_SERVER_URL\""
        env:
          LICENSE_SERVER_URL: ${{ secrets.LICENSE_SERVER_URL }}

      - name: Docker Login
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # pinned v3
        with:
          registry: ghcr.io
          username: ${{ env.GITHUB_ACTOR }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Start the Unity docker container
        run: ./scripts/ci-docker.sh "$UNITY_VERSION" "iOS" "$UNITY_LICENSE_SERVER_CONFIG"
        shell: bash
        env:
          UNITY_LICENSE_SERVER_CONFIG: ${{ secrets.UNITY_LICENSE_SERVER_CONFIG }}

      - name: Download IntegrationTest project
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4
        with:
          name: smoke-test-${{ env.UNITY_VERSION }}

      - name: Extract project archive
        run: tar -xvzf test-project.tar.gz

      - name: Download UPM package
        uses: vaind/download-artifact@e7141b6a94ef28aa3d828b52830cfa1f406a1848 # v4-with-wait-timeout
        with:
          name: ${{ env.GITHUB_SHA }}
          wait-timeout: 3600

      - name: Extract UPM package
        run: ./test/Scripts.Integration.Test/extract-package.ps1

      - name: Add Sentry to the project
        run: ./test/Scripts.Integration.Test/add-sentry.ps1 -UnityPath "$env:UNITY_PATH"

      - name: Configure Sentry
        run: ./test/Scripts.Integration.Test/configure-sentry.ps1 -UnityPath "$env:UNITY_PATH" -Platform "$env:BUILD_PLATFORM" -CheckSymbols
        env:
          BUILD_PLATFORM: ${{ matrix.build_platform }}

      - name: Build Project
        run: ./test/Scripts.Integration.Test/build-project.ps1 -UnityPath "$env:UNITY_PATH" -Platform "$env:BUILD_PLATFORM" -CheckSymbols:$false -UnityVersion "$env:UNITY_VERSION"
        env:
          BUILD_PLATFORM: ${{ matrix.build_platform }}

      # We create tar explicitly because upload-artifact is slow for many files.
      - name: Create archive
        shell: bash
        run: |
          # Note: remove local.properties file that contains Android SDK & NDK paths in the Unity installation.
          rm -rf samples/IntegrationTest/Build/*_BackUpThisFolder_ButDontShipItWithYourGame
          tar -cvzf test-app-runtime.tar.gz samples/IntegrationTest/Build

      # Upload runtime initialization build
      - name: Upload test app
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: testapp-ios-${{ env.UNITY_VERSION }}-runtime
          if-no-files-found: error
          path: test-app-runtime.tar.gz
          retention-days: 14

      - name: Overwrite OptionsConfiguration for build-time initialization
        run: |
          $optionsPath = "samples/IntegrationTest/Assets/Scripts/OptionsConfiguration.cs"
          $content = Get-Content $optionsPath -Raw
          $content = $content -replace 'IosNativeInitializationType = NativeInitializationType.Runtime', 'IosNativeInitializationType = NativeInitializationType.BuildTime'
          Set-Content $optionsPath $content

      - name: Build Project for mobile platforms (build-time initialization)
        run: ./test/Scripts.Integration.Test/build-project.ps1 -UnityPath "$env:UNITY_PATH" -Platform "$env:BUILD_PLATFORM" -CheckSymbols:$false -UnityVersion "$env:UNITY_VERSION"
        env:
          BUILD_PLATFORM: ${{ matrix.build_platform }}

      - name: Create archive (build-time initialization)
        shell: bash
        run: |
          rm -rf samples/IntegrationTest/Build/*_BackUpThisFolder_ButDontShipItWithYourGame
          tar -cvzf test-app-buildtime.tar.gz samples/IntegrationTest/Build

      # Upload build-time initialization build
      - name: Upload test app (build-time initialization)
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: testapp-ios-${{ env.UNITY_VERSION }}-buildtime
          if-no-files-found: error
          path: test-app-buildtime.tar.gz
          retention-days: 14
          
      - name: Upload IntegrationTest project on failure
        if: ${{ failure() }}
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: failed-project-ios-${{ env.UNITY_VERSION }}
          path: |
            samples/IntegrationTest
            !samples/IntegrationTest/Build/*_BackUpThisFolder_ButDontShipItWithYourGame
          # Lower retention period - we only need this to retry CI.
          retention-days: 14